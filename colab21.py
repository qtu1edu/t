# -*- coding: utf-8 -*-
"""Untitled21.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dkDbk8szwk9NfmZUVYvY9f9eCltnvjKx
"""

import sympy as sp

# Define symbols
t = sp.symbols('t')
A, B, C, D, E = sp.symbols('A B C D E')
c1, c2 = sp.symbols('c1 c2')

# Homogeneous solution
yh = c1 * sp.exp(2*t) + c2 * sp.exp(-t)

# Particular solution guess
yp = (A*t**2 + B*t + C) * sp.exp(2*t) + D*t + E

# Calculate derivatives
yp_prime = sp.diff(yp, t)
yp_double_prime = sp.diff(yp_prime, t)

# Define the differential equation
DE = yp_double_prime - yp_prime - 2*yp - (12*t*sp.exp(2*t) + 7*sp.exp(2*t) + 4*t + 2)

# Expand the DE and collect terms for solving
coeff_eqns = sp.collect(DE.expand(), [t**2*sp.exp(2*t), t*sp.exp(2*t), sp.exp(2*t), t, 1], evaluate=False)

# Equations to solve for coefficients (setting each coefficient to zero)
eqns = [
    coeff_eqns[t**2 * sp.exp(2*t)],
    coeff_eqns[t * sp.exp(2*t)],
    coeff_eqns[sp.exp(2*t)],
    coeff_eqns[t],
    coeff_eqns[1]
]

# Solve the system of equations for A, B, C, D, E
solution = sp.solve(eqns, (A, B, C, D, E))

# Include the particular solution with the solved coefficients in the general solution
y_general = yh + yp.subs(solution)

# Initial conditions
initial_conditions = [
    y_general.subs(t, 0) + 2,  # y(0) = -2
    sp.diff(y_general, t).subs(t, 0) + 2  # y'(0) = -2
]

# Solve for c1, c2 using initial conditions
initial_solution = sp.solve(initial_conditions, (c1, c2))

# Substitute back c1 and c2 to get the final solution
final_solution = y_general.subs(initial_solution)
print(sp.simplify(final_solution))
