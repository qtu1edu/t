# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GQ8la6gjIWgHi5R6gNYTYUXqTf8NGNub
"""

import numpy as np
import matplotlib.pyplot as plt

# Define parameters
k = 0.2  # constant
T0 = 60  # average temperature of the surroundings
T1 = 15  # maximum variation in temperature
omega = np.pi / 12  # angular frequency for a 24-hour period

# Define the differential equation function
def dudt(u, t):
    return k * (T0 -u)

# Create a grid of u and t values
u_vals = np.linspace(40, 80, 20)  # Temperature range for the building
t_vals = np.linspace(0, 24, 20)    # 24-hour period

# Create a meshgrid from u and t values
U, T = np.meshgrid(u_vals, t_vals)

# Calculate du/dt for each point in the grid
dudt_vals = dudt(U, T)

# Plot the direction field
plt.figure(figsize=(8, 6))
plt.quiver(T, U, np.ones_like(dudt_vals), dudt_vals, scale=20)
plt.xlabel('Time (hours)')
plt.ylabel('Temperature (Fahrenheit)')
plt.title('Direction Field for Temperature Change')
plt.grid(True)
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Define parameters
r = 0.06  # growth rate
K = 2000  # carrying capacity

# Define the differential equation
def dP_dt(P):
    return r * P * (1 - P / K)

# Create a grid of P and t values
t = np.linspace(0, 100, 20)
P = np.linspace(0, 2000, 20)

# Create a meshgrid for P and t
T, P = np.meshgrid(t, P)

# Calculate the direction at each point on the grid
dP = dP_dt(P)

# Plot direction field
plt.figure(figsize=(8, 6))
plt.quiver(T, P, np.ones_like(dP), dP, angles='xy')

# Set axis labels and title
plt.xlabel('Time (t)')
plt.ylabel('Population (P)')
plt.title('Direction Field for Population Growth')

# Set axis limits
plt.xlim(0, 100)
plt.ylim(0, 2000)

# Show plot
plt.grid()
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Constants for the problem
T0 = 60  # Average temperature of surroundings (in Fahrenheit)
T1 = 0   # Maximum variation in temperature (in Fahrenheit)
k = 0.2  # Rate constant for heat loss (in 1/hour)

# Time range for the direction field
t = np.linspace(0, 24, 100)
# Temperature range for the direction field
u = np.linspace(T0 - T1 - 5, T0 + T1 + 5, 100)  # Adding a buffer for better visualization

# Meshgrid for creating 2D arrays of t and u values
T, U = np.meshgrid(t, u)

# Differential equation function for scenario (c)
du_dt = k * (T0 - U)

# Plotting direction field for scenario (c)
plt.figure(figsize=(10, 6))
plt.quiver(T, U, np.ones_like(du_dt), du_dt, angles='xy', scale_units='xy', scale=20, color='b', alpha=0.5)
plt.xlabel('Time (hours)')
plt.ylabel('Temperature (°F)')
plt.title('Direction Field for Newton’s Law of Cooling (Scenario c)')
plt.grid(True)
plt.ylim(T0 - T1 - 2, T0 + T1 + 2)
plt.xlim(0, 24)
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Define parameters
k = 0.2  # constant
T0 = 60  # average temperature of the surroundings

# Define the simplified differential equation function
def dudt_simplified(u):
    return k * (T0 - u)

# Create a grid of u values
u_vals = np.linspace(40, 80, 20)  # Temperature range for the building

# Calculate du/dt for each u value
dudt_vals_simplified = dudt_simplified(u_vals)

# Plot the direction field
plt.figure(figsize=(8, 6))
plt.plot(u_vals, dudt_vals_simplified, label='du/dt vs. u')
plt.xlabel('Temperature (Fahrenheit)')
plt.ylabel('du/dt')
plt.title('Direction Field for Temperature Change')
plt.grid(True)
plt.legend()
plt.show()
