# -*- coding: utf-8 -*-
"""Untitled25.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J137JTu0H4ywsXTLoRWR9Kxd8NFf43l0
"""

from scipy.optimize import fsolve

# Define the cubic equation function
def cubic_equation(x):
    return -4*x**3 + 6*x**2 - 1

# Provide an initial guess for the roots
initial_guesses = [0.0, 0.5, 1.0]

# Solve for the roots using fsolve
roots = fsolve(cubic_equation, initial_guesses)

# Print the roots
print("Roots of the equation -4x^3 + 6x^2 - 1 = 0 are:", roots)

from scipy.optimize import fsolve
import numpy as np

# Define the derivative of the function (y'(x))
def derivative(x):
    return -4*x**3 + 6*x**2 - 1

# Define the original function (y(x))
def function(x):
    return (-x**4 / 24) + (x**3 / 12) - (x / 24)

# Initial guesses to find critical points
initial_guesses = [0.0, 0.5, 1.0]

# Solve for critical points
critical_points = fsolve(derivative, initial_guesses)

# Define the range of interest
x_range = np.linspace(0, 1, 1000)

# Evaluate y(x) at critical points and endpoints
all_points = np.concatenate((critical_points, [0, 1]))
all_points = np.unique(all_points)  # To ensure no duplicates
y_values = [function(point) for point in all_points]

# Determine the maximum (or minimum) value
max_value = max(y_values)
max_point = all_points[y_values.index(max_value)]

print(f"The maximum value of y(x) is {max_value} at x = {max_point}")

import matplotlib.pyplot as plt
import numpy as np

# Define the polynomial function
def polynomial(x):
    return -x**3 + 3/2 * x**2 - 1/4

# Define the range over which to plot
x_values = np.linspace(0, 1, 1000)

# Calculate the values of the polynomial for the given range
y_values = polynomial(x_values)

# Plot the graph of the polynomial
plt.figure(figsize=(8, 5))
plt.plot(x_values, y_values, label="-x^3 + 3/2 * x^2 - 1/4")
plt.axhline(0, color='black', linestyle='--', linewidth=0.5)
plt.axvline(0, color='black', linestyle='--', linewidth=0.5)
plt.xlabel("x")
plt.ylabel("y")
plt.title("Graph of -x^3 + 3/2 * x^2 - 1/4")
plt.legend()
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Define the polynomial function
def displacement(x):
    return (-x**4 / 24) + (x**3 / 12) - (x / 24)

# Define the range over which to plot (from 0 to 1)
x_values = np.linspace(0, 1, 1000)

# Calculate the values of the polynomial for the given range
y_values = displacement(x_values)

# Plot the graph of the polynomial
plt.figure(figsize=(8, 5))
plt.plot(x_values, y_values, label="y(x) = -x^4 / 24 + x^3 / 12 - x / 24")
plt.axhline(0, color='black', linestyle='--', linewidth=0.5)
plt.axvline(0, color='black', linestyle='--', linewidth=0.5)
plt.xlabel("x")
plt.ylabel("y(x)")
plt.title("Graph of y(x)")
plt.legend()
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
import numpy as np
from scipy.optimize import fsolve

# Define the function (y'(x))
def derivative(x):
    return (-x**3 / 6) + (x**2 / 4) - (1 / 24)

# Define the range over which to plot (from 0 to 1)
x_values = np.linspace(0, 1, 1000)

# Calculate the values of the derivative for the given range
y_prime_values = derivative(x_values)

# Solve for the critical points using initial guesses
initial_guesses = [0.25, 0.5, 0.75]
critical_points = fsolve(derivative, initial_guesses)

# Evaluate the derivative at the critical points
critical_values = [derivative(point) for point in critical_points]

# Plot the graph of the derivative
plt.figure(figsize=(8, 5))
plt.plot(x_values, y_prime_values, label="y'(x) = -x^3 / 6 + x^2 / 4 - 1 / 24")
plt.scatter(critical_points, critical_values, color='red', label="Critical Points", zorder=5)
plt.axhline(0, color='black', linestyle='--', linewidth=0.5)
plt.axvline(0, color='black', linestyle='--', linewidth=0.5)
plt.xlabel("x")
plt.ylabel("y'(x)")
plt.title("Graph of y'(x) with Critical Points")
plt.legend()
plt.grid(True)
plt.show()

import numpy as np

# Define the coefficients of the cubic equation
coefficients = [-4, 6, 0, 1]

# Find the roots of the equation
roots = np.roots(coefficients)

print("Roots of the equation:", roots)
