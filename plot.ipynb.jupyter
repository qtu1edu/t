{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "WBplILhbsYtO",
        "outputId": "b7a35033-ca42-4c52-f4e0-60afc72d51cc"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        " '''\n",
        "  @file name: Practice_Problem_17>\n",
        "  @description: random dice roll for 1000 times and generate a visual histogram\n",
        "  @date created: 11/11/2023\n",
        "  @version: 1.00\n",
        "  '''\n",
        "\n",
        "import random\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Roll two dice 1000 times and store the sums\n",
        "dice_sums = [random.randint(1, 6) + random.randint(1, 6) for _ in range(1000)]\n",
        "\n",
        "# Generate the histogram list for sums between 2 and 12\n",
        "histogram_list = [dice_sums.count(i) for i in range(2, 13)]\n",
        "\n",
        "# Index list for the x-axis\n",
        "index_list = list(range(2, 13))\n",
        "\n",
        "# Plot the histogram\n",
        "plt.bar(index_list, histogram_list, tick_label=index_list)\n",
        "\n",
        "# Labeling the axes\n",
        "plt.xlabel('Sum of dice rolls')\n",
        "plt.ylabel('Frequency')\n",
        "plt.title('Histogram of Dice Roll Sums over 1000 Trials')\n",
        "\n",
        "# Save the figure\n",
        "plt.savefig('DiceRollHistogram.png')\n",
        "\n",
        "# Show the plot\n",
        "plt.show()\n",
        "\n",
        "\n",
        "\n",
        "    total_points = 0\n",
        "    for course, grades in student.items():\n",
        "        homework = grades['homework'] * 0.5\n",
        "        midterm = grades['midterm'] * 0.2\n",
        "        final = grades['final'] * 0.3\n",
        "        total_course_points = homework + midterm + final\n",
        "        total_points += total_course_points\n",
        "\n",
        "    gpa = total_points / len(student)\n",
        "    return gpa\n",
        "\n",
        "\n",
        "with open('grades.csv') as csvfile:\n",
        "    reader = csv.DictReader(csvfile)\n",
        "\n",
        "    with open('gpa.txt', 'w') as gpa_file:\n",
        "        for row in reader:\n",
        "            student_name = row['Student']\n",
        "            student_data = {\n",
        "                'homework': int(row['homework']),\n",
        "                'midterm': int(row['midterm']),\n",
        "                'final': int(row['final'])\n",
        "            }\n",
        "\n",
        "            student_gpa = calculate_gpa(student_data)\n",
        "            gpa_file.write(f'{student_name}: {student_gpa:.2f}\\n')\n",
        "\n",
        "# Part 2\n",
        "import csv\n",
        "\n",
        "def create_records_dictionary():\n",
        "    records = {}\n",
        "\n",
        "    with open('grades.csv') as csvfile:\n",
        "        reader = csv.DictReader(csvfile)\n",
        "\n",
        "        for row in reader:\n",
        "            student_name = row['Student Name']\n",
        "            course_name = row['Course Name']\n",
        "            grades = {\n",
        "                'homework': int(row['Homework']),\n",
        "                'midterm': int(row['Midterm']),\n",
        "                'final': int(row['Final'])\n",
        "            }\n",
        "\n",
        "            if student_name not in records:\n",
        "                records[student_name] = {}\n",
        "\n",
        "            records[student_name][course_name] = grades\n",
        "\n",
        "    return records\n",
        "\n",
        "#Part 3\n",
        "import csv\n",
        "\n",
        "def search_or_add_student(records):\n",
        "    choice = input('1: search for a student, 2: add a student: ')\n",
        "\n",
        "    if choice == '1':\n",
        "        search_student(records)\n",
        "    elif choice == '2':\n",
        "        add_student(records)\n",
        "    else:\n",
        "        print('Invalid choice')\n",
        "\n",
        "#Part 4\n",
        "\n",
        "import csv\n",
        "\n",
        "def add_student(records):\n",
        "    student_name = input('Enter student name: ')\n",
        "\n",
        "    if student_name in records:\n",
        "        print(f'Student already in the records: {student_name}')\n",
        "        return\n",
        "\n",
        "    course_name = input('Enter course name: ')\n",
        "    homework = int(input('Enter homework grade: '))\n",
        "    midterm = int(input('Enter midterm grade: '))\n",
        "    final = int(input('Enter final grade: '))\n",
        "\n",
        "    student_data = {\n",
        "        course_name: {\n",
        "            'homework': homework,\n",
        "            'midterm': midterm,\n",
        "            'final': final\n",
        "        }\n",
        "    }\n",
        "\n",
        "    records[student_name] = student_data\n",
        "\n",
        "#Part 5\n",
        "\n",
        "def modify_student_record(records):\n",
        "    student_name = input('Enter student name: ')\n",
        "\n",
        "    if student_name not in records:\n",
        "        print(f'Student not in our records: {student_name}')\n",
        "        return\n",
        "\n",
        "    choice = input()"
      ]
    }
  ]
}
