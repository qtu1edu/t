# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wZcbUXVwtQMKtayeHlJe5nWWwGby4GeF
"""

import numpy as np
import matplotlib.pyplot as plt

# Define the differential equation
def dP_dt(P):
    return 0.06 * P * (1 - P / 2000)

# Define the range of t and P values
t = np.linspace(0, 100, 20)
P = np.linspace(0, 2000, 20)

# Create a meshgrid for t and P
T, P = np.meshgrid(t, P)

# Calculate the direction at each point on the grid
dP = dP_dt(P)

# Plot direction field
plt.figure(figsize=(8, 6))
plt.quiver(T, P, np.ones_like(dP), dP, angles='xy')

# Set axis labels and title
plt.xlabel('Time (t)')
plt.ylabel('Population (P)')
plt.title('Direction Field for Population Growth')

# Set axis limits
plt.xlim(0, 100)
plt.ylim(0, 2000)

# Plot the curve representing population doubling
plt.plot(t, 2 * np.ones_like(t) * 300, color='red', linestyle='--', label='Population Doubles')

# Add legend
plt.legend()

# Show plot
plt.grid()
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Define the differential equation
def dP_dt(P):
    return 0.06 * P * (1 - P / 2000)

# Define the range of t and P values
t = np.linspace(0, 100, 20)
P = np.linspace(0, 2000, 20)

# Create a meshgrid for t and P
T, P = np.meshgrid(t, P)

# Calculate the direction at each point on the grid
dP = dP_dt(P)

# Plot direction field
plt.figure(figsize=(8, 6))
plt.quiver(T, P, np.ones_like(dP), dP, angles='xy')

# Set axis labels and title
plt.xlabel('Time (t)')
plt.ylabel('Population (P)')
plt.title('Direction Field for Population Growth')

# Set axis limits
plt.xlim(0, 100)
plt.ylim(0, 2000)

# Plot the curve representing population doubling
t_double = np.linspace(0, 20.4, 100)  # Time for population to double
P_double = 2 * np.ones_like(t_double) * 300  # Population doubles from P(0) = 300
plt.plot(t_double, P_double, color='red', linestyle='--', label='Population Doubles')

# Add legend
plt.legend()

# Show plot
plt.grid()
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Define parameters
r = 0.06  # growth rate
K = 2000  # carrying capacity

# Define the differential equation
def dP_dt(P):
    return r * P * (1 - P / K)

# Create a grid of P and t values
t = np.linspace(0, 40, 20)  # Adjust the range to include t = 35.66
P = np.linspace(0, 2000, 20)

# Create a meshgrid for P and t
T, P = np.meshgrid(t, P)

# Calculate the direction at each point on the grid
dP = dP_dt(P)

# Plot direction field
plt.figure(figsize=(8, 6))
plt.quiver(T, P, np.ones_like(dP), dP, angles='xy')

# Set axis labels and title
plt.xlabel('Time (t)')
plt.ylabel('Population (P)')
plt.title('Direction Field for Population Growth')

# Set axis limits
plt.xlim(0, 40)
plt.ylim(0, 2000)

# Show plot
plt.grid()
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Define parameters
r = 0.06  # growth rate
K = 2000  # carrying capacity

# Define the differential equation
def dP_dt(P):
    return r * P * (1 - P / K)

# Create a grid of P and t values
t = np.linspace(0, 100, 20)
P = np.linspace(0, 2000, 20)

# Create a meshgrid for P and t
T, P = np.meshgrid(t, P)

# Calculate the direction at each point on the grid
dP = dP_dt(P)

# Plot direction field
plt.figure(figsize=(8, 6))
plt.quiver(T, P, np.ones_like(dP), dP, angles='xy')

# Set axis labels and title
plt.xlabel('Time (t)')
plt.ylabel('Population (P)')
plt.title('Direction Field for Population Growth')

# Plot the point where population doubles
plt.plot(14.788, 900, 'ro')  # Red dot for the point (14.788, 600)

# Set axis limits
plt.xlim(0, 100)
plt.ylim(0, 2000)

# Show plot
plt.grid()
plt.show()
