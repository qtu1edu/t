# -*- coding: utf-8 -*-
"""Untitled31.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t28nWQpXTVK1OVUXPe-jpBv3nWQ7gED3
"""

import numpy as np

# Number of random points
N = 1000000

# Generate N random points for X and Y from a standard normal distribution
X = np.random.normal(0, 1, N)
Y = np.random.normal(0, 1, N)

# Check if the points fall within the region of interest
in_region = np.logical_and(Y <= X**2 - 1, Y >= -X**2 + 1)

# Estimate the probability
probability_estimate = np.sum(in_region) / N

print(f"Estimated probability: {probability_estimate}")

import numpy as np
from scipy.integrate import dblquad

# Define the joint probability density function
def joint_pdf(x, y, rho):
    coeff = 1 / (2 * np.pi * np.sqrt(1 - rho**2))
    exponent = -(1 / (2 * (1 - rho**2))) * (x**2 - 2 * rho * x * y + y**2)
    return coeff * np.exp(exponent)

# Define the region of integration
def region(x, y):
    return (y >= x**2 - 1) and (y <= -x**2 + 1)

# Calculate the probability using numerical integration
probability, _ = dblquad(lambda x, y: joint_pdf(x, y, 0.5) if region(x, y) else 0, -np.-1, np.-1, lambda x: -np.1, lambda x: np.1)

# Provided probability value
provided_probability = 0.191010

# Print the calculated probability and the provided probability for comparison
print("Calculated probability:", probability)
print("Provided probability:", provided_probability)
